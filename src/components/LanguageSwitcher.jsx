import React, { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Globe } from 'lucide-react';

const languages = [
  { code: 'en', name: 'English',  flag: 'üá¨üáß' },
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π',  flag: 'üá∑üá∫' },
  { code: 'pl', name: 'Polski',   flag: 'üáµüá±' },
  { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',  flag: 'üá∏üá¶' },
];

const SUPPORTED = languages.map(l => l.code);
const RTL = ['ar'];

/**
 * –ú–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø—É—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —è–∑—ã–∫.
 * –ü—Ä–∏–º–µ—Ä—ã:
 *  - /ru/oncology  -> /en/oncology
 *  - /en           -> /ar
 *  - /             -> /en
 *  - /oncology     -> /pl/oncology  (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞—à–ª–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
 */
function buildPathWithLang(pathname, newLang) {
  const re = /^\/(en|ru|pl|ar)(?=\/|$)/;
  if (re.test(pathname)) {
    return pathname.replace(re, `/${newLang}`);
  }
  // –Ω–µ—Ç —è–∑—ã–∫–æ–≤–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
  // —É–±–µ—Ä—ë–º –≤–æ–∑–º–æ–∂–Ω—ã–π –¥–≤–æ–π–Ω–æ–π —Å–ª—ç—à
  return `/${newLang}${pathname.startsWith('/') ? '' : '/'}${pathname}`.replace(/\/{2,}/g, '/');
}

const LanguageSwitcher = () => {
  const { i18n } = useTranslation();
  const params = useParams();           // { lang?: 'en'|'ru'|'pl'|'ar' }
  const location = useLocation();       // pathname, search, hash
  const navigate = useNavigate();

  const currentLang = useMemo(() => {
    const fromUrl = params.lang;
    if (SUPPORTED.includes(fromUrl)) return fromUrl;
    // fallback –Ω–∞ —Ç–µ–∫—É—â–∏–π i18n –∏–ª–∏ en
    return SUPPORTED.includes(i18n.language) ? i18n.language : 'en';
  }, [params.lang, i18n.language]);

  const currentLanguage = languages.find(l => l.code === currentLang) || languages[0];

  const changeLanguage = (lng) => {
    // 1) –Ω–∞–≤–∏–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–æ–≤—ã–π URL —Å –¥—Ä—É–≥–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º —è–∑—ã–∫–∞
    const newPath = buildPathWithLang(location.pathname, lng);
    navigate(`${newPath}${location.search}${location.hash}`, { replace: false });

    // 2) —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º i18n —Å—Ä–∞–∑—É (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ App —Å–∏–Ω–∫–Ω–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ URL)
    if (i18n.language !== lng) i18n.changeLanguage(lng);

    // 3) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ
    const dir = RTL.includes(lng) ? 'rtl' : 'ltr';
    document.documentElement.setAttribute('dir', dir);
    document.documentElement.setAttribute('lang', lng);
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="sm" className="flex items-center gap-2">
          <Globe className="h-4 w-4" />
          <span>{currentLanguage.flag}</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        {languages.map((language) => (
          <DropdownMenuItem
            key={language.code}
            onClick={() => changeLanguage(language.code)}
            className="flex items-center gap-2"
          >
            <span className="text-lg">{language.flag}</span>
            <span>{language.name}</span>
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default LanguageSwitcher;
